#===============================================================================
#StateTagEnteringScreen
#===============================================================================
[Statedef 5600; type: S; movetype: I; physics: S;
 anim: Const(AnimRunFwdOrHopForward); sprpriority: 2; ctrl: 0;]

if Time = 0 {
	PosSet{x: -Const240p(243) * Facing; y: 0}
}

if BackEdgeBodyDist >= 0 {
	if Standby {
		TagIn{}
	}
	if BackEdgeDist * LocalScale >= Map(_iksys_tagSwitchDist) || P2BodyDist X < Const240p(30) {
		VelSet{x: 0; y: 0}
		ChangeState{value: Const(StateStand); ctrl: 1}
	}
}

VelSet{x: Const240p(10); y: 0}

#===============================================================================
#StateTagLeavingScreen
#===============================================================================
[Statedef 5610; type: S; movetype: I; physics: N;
 anim: Const(AnimRunFwdOrHopForward); sprpriority: -2; velset: 0, 0; ctrl: 0; facep2: 1;]

persistent(0) {
	Turn{}
}

if !Standby {
	TagOut{}
}

VelSet{x: Const240p(10); y: 0}

if BackEdgeDist < -Const240p(160) || FrontEdgeDist < -Const240p(160) {
	ChangeState{value: Const(StateTagWaitingOutside)}
}

#===============================================================================
#StateTagWaitingOutside
#===============================================================================
[Statedef 5611; type: A; movetype: I; physics: N;
 anim: Const(AnimStanding); velset: 0, 0; ctrl: 0;]

AssertSpecial{flag: invisible; flag2: noautoturn}

if Facing != PlayerID(Map(_iksys_tagCurrentID)),Facing {
	Turn{}
}

#===============================================================================
#StateTagJumpingIn
#===============================================================================
[Statedef 5620; type: S; movetype: I; physics: N;
 anim: Const(AnimJumpForwards_upwards); sprpriority: 2; ctrl: 0;]

if AnimElem = 2, < 0 {
	PosSet{x: -Const240p(243) * Facing; y: 0}
} else if AnimElem = 2, = 0 {
	VelSet{x: Const240p(4); y: -Const240p(8.75)}
} else if AnimElem = 2, >= 0 {
	Gravity{}
	if Vel Y >= 0 && Pos Y > 0 {
		VelSet{x: 0; y: 0}
		ChangeState{value: Const(StateTagLanding)}
	}
}

#===============================================================================
#StateTagLanding
#===============================================================================
[Statedef 5621; type: S; movetype: I; physics: N;
 anim: Const(AnimJumpLanding); sprpriority: 2; ctrl: 0;]

if Time = 0 {
	PosSet{y: 0}
}

if AnimTime >= 0 {
	TagIn{stateno: Const(StateStand); ctrl: 1}
}

#===============================================================================
#Functions
#===============================================================================
[Function fTagPartnerRange(currentID) ret]
if $currentID > GetPlayerID(TeamSide) + NumPartner {
	let currentID = GetPlayerID(TeamSide);
} else if $currentID < GetPlayerID(TeamSide) {
	let currentID = GetPlayerID(TeamSide) + NumPartner;
}
let ret = $currentID;

[Function fGetTagPartnerID(currentID, add) ret]
let currentID = call fTagPartnerRange($currentID + $add);
if PlayerID($currentID),Alive = 0 {
	let partnerCnt = 1;
	if $partnerCnt = Min(NumPartner, 3) {
		let currentID = 0;
	} else {
		let currentID = call fTagPartnerRange($currentID + $add);
		if PlayerID($currentID),Alive = 0 {
			let partnerCnt = $partnerCnt + 1;
			if $partnerCnt = Min(NumPartner, 3) {
				let currentID = 0;
			} else {
				let currentID = call fTagPartnerRange($currentID + $add);
				if PlayerID($currentID),Alive = 0 {
					let currentID = 0;
				}
			}
		}
	}
}
let ret = $currentID;

#===============================================================================
#Global states (executed when in self's state)
#===============================================================================
[Statedef -3]

if !Const(Default.Enable.Tag) || IsHelper {
	#do nothing, global code disabled locally (or executed by helper)
} else if RoundState = 0 && TeamMode = Tag {
	MapSet{map: "_iksys_tagActive"; value: 1}
	MapSet{map: "_iksys_tagSwitchDist"; value: 0}
	if RoundNo = 1 {
		MapSet{map: "_iksys_tagCurrentID"; value: GetPlayerID(TeamSide)}
	} else if ID = Map(_iksys_tagCurrentID) {
		TeamMapSet{map: "_iksys_tagCurrentID"; value: ID}
	}
} else if Map(_iksys_tagActive) = 1 {
	if RoundState = 4 {
		MapSet{map: "_iksys_tagActive"; value: 0}
	} else if Alive {
		if ID = Map(_iksys_tagCurrentID) {
			if Ctrl = 1 && Pos Y >= 0 && MoveType != H && GetHitVar(isbound) = 0 && StateNo != Const(StateDownedGetHit_gettingUp) &&
			StateNo != [Const(StateAirGetHit_fallRecoveryOnGroundStillFalling), Const(StateAirGetHit_fallRecoveryInAir)] {
				let partnerID = 0;
				if command = "d" {
					let partnerID = call fGetTagPartnerID(ID, -1);
				} else if command = "w" {
					let partnerID = call fGetTagPartnerID(ID, 1);
				}
				if $partnerID > 0 && PlayerID($partnerID),StateNo = Const(StateTagWaitingOutside) {
					MapSet{map: "_iksys_tagSwitchDist"; value: BackEdgeDist * LocalScale; redirectid: $partnerID}
					TeamMapSet{map: "_iksys_tagCurrentID"; value: $partnerID}
					ChangeState{value: Const(StateTagEnteringScreen); redirectid: $partnerID}
					ChangeState{value: Const(StateTagLeavingScreen)}
				}
			}
		} else if StateNo = Const(StateTagWaitingOutside) && RoundState = 3 {
			ChangeState{value: Const(StateTagJumpingIn); ctrl: 1}
		} else if StateNo != [Const(StateTagLeavingScreen), Const(StateTagWaitingOutside)] && RoundState = 2 {
			ChangeState{value: Const(StateTagLeavingScreen); ctrl: 0}
		}
	} else if ID = Map(_iksys_tagCurrentID) {
		MapSet{map: "_iksys_tagActive"; value: 0}
		let partnerID = call fGetTagPartnerID(ID, 1);
		if $partnerID > 0 {
			MapSet{map: "_iksys_tagSwitchDist"; value: BackEdgeDist * LocalScale; redirectid: $partnerID}
			TeamMapSet{map: "_iksys_tagCurrentID"; value: $partnerID}
			ChangeState{value: Const(StateTagEnteringScreen); redirectid: $partnerID}
		}
	}
	# Red Life regeneration
	if Standby && RedLife > 0 && (Time % 30) = 0 {
		let regenVal = min(RedLife, ceil(LifeMax/200)); #0.5% LifeMax per 0.5s
		LifeAdd{value: $regenVal; absolute: 1}
		RedLifeAdd{value: -$regenVal; absolute: 1}
	}
}
